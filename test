ask 2 
Task description 
- Your task is to implement an Angular component that renders a text input field with auto-completion. 

Requirements 
-In order to fetch items based on the current query, you should send a GET request to the mocked https://example.com/api/items endpoint. The endpoint accepts a query parameter q that is meant to hold the query's value. An example request might look like https://example.com/api/items?q=query. 
- The component should render a div element that has the class name wrapper and two child elements: a div element with the class name control and a div element with the class name list. The div element with class name control should contain an input element with the class name input, and this is the input in which the user enters a query. 
- Once a response comes from the API, all strings from the response should be displayed inside the div tag with class name list, each one inside a separate a element with the class name list-item. The strings should be displayed in the same order as they arrived in from the API. 
- You should avoid sending too many requests to the API; in particular, do not send requests on every single keypress! You are expected to properly debounce the requests. The debounce time-out should be 500 milliseconds. When items are being fetched, a class name is-loading should be added to the input's wrapper (the element with class name control). When items are being fetched, no request has been sent, or the endpoint has returned zero items, the div element with class name list should not be rendered. 
- The component emits string typed event with an output property onSelect. Event is emitted whenever user click on an item from autocomplete list, and contain name of selected item. Clicking on an item does not have any effect apart from emitting event. 
The component should be exported with class named AutocompleteComponent and should use selector autocomplete-input (as in initial solution.) Assumptions https://example.com is a mocked service 
- it can be accessed only in the Codility UI. You can however use browser console "network" tool to check what request your solution is performing. The mocked endpoint https://example.com/api/items returns an array of strings. The array's length is at most 10. Assume that a request sent to the mocked endpoint https://example.com/api/items never fails. The "Preview" tab will display your component. You can use it for testing purposes. 
In preview mode, the API is mocked up, and will return always the same results, but in a random order. Also, the preview page imports a CSS spreadsheet from Bulma (v0.7.5) to give neat styling. Design/styling is not assessed and will not affect your score. You should focus only on implementing the requirements. 
The following imports are allowed: @angular/core: (v11.1.2), @angular/common: (v11.1.2), rxjs: (v6.6.3), Use console.log and console.error for debugging purposes via your browser's developer tools. 

Additional examples 
Example 1 
Let's consider the following sequence of actions: The user types "q" into the input; After 50 ms the user presses "u", and then again, after every 50 ms, a new character is inserted until the input value is "query"; 
Only one request to the API is sent, exactly 500 ms after "y" is inputted; During this period (from pressing "y" until the response comes in), the class name is-loading is added to the input's wrapper.
Example 2 
If the response from the API endpoint is: ["Italy", "Spain", "Portugal", "Macedonia"] then the list section, which is rendered as follows: 
	<div class="list"> 
		<a class="list-item">Italy</a> 
		<a class="list-item">Spain</a> 
		<a class="list-item">Portugal</a> 
		<a class="list-item">Macedonia</a> 
	</div> 

Environment 
angular/core v11.1.2 
angular/common v11.1.2 
rxjs v6.6.3 node 14 

Solution 
Solution Angular (TypeScript) 123456789101112131415161718192021 

import { Component, EventEmitter, Output } from "@angular/core";
import { HttpClient } from "@angular/common/http";

@Component({ 
	selector: "autocomplete-input", template: ` <div class="wrapper"> <div class="control"> <input type="text" class="input" /> </div> <div class="list is-hoverable"></div> </div> `,
	})

export class AutocompleteComponent { 
	@Output() public onSelect = new EventEmitter(); 
	
	constructor(private http: HttpClient) {} 
	
	ngOnInit() {}} 
	
	To leave editor use Ctrl + M Preview Test Output Run Code All changes saved
	
	
	
	1 Debo hacer un get a :
	https://example.com/api/items
	Ej:
	https://example.com/api/items?q=query (CHECKED)

	2 Debo generar un componente que tenga un DIV

	3 No modificar el orden del llamado por API, y mostrar el nombre de la clase
	
	4 No enviar consultar en el tipeo
	El tiempo de espera antirrebote debe ser de 500 milisegundos. 
	
	5 Redefinir el onSelect para guardar lo seleccionado

6 El componente debe exportarse con una clase llamada AutocompleteComponent
